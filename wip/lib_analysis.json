{
  "__init__.py": {
    "filename": "__init__.py",
    "lines": 31,
    "module_doc": "\nBigQuery AST Types Library\n\nCore library modules for AST manipulation.\n",
    "imports": [
      "types.*",
      "node_path.NodePath",
      "node_path.create_path",
      "node_path.get_node_at_path",
      "visitor.BaseVisitor",
      "visitor.visit",
      "scope.Scope",
      "serializer.SQLSerializer",
      "serializer.SerializerOptions",
      "serializer.to_sql",
      "serializer.pretty_print",
      "serializer.compact_print",
      "builders.b",
      "builders.Builders",
      "builders.ValidationError",
      "collection.Collection"
    ],
    "classes": [],
    "functions": [],
    "constants": []
  },
  "bsql.py": {
    "filename": "bsql.py",
    "lines": 429,
    "module_doc": "\nBigQuery SQL Transformation Wrapper\n\nErgonomic wrapper around sqlglot for AST-based SQL transformations.\nProvides jQuery-like Iterator pattern for traversing and transforming SQL.\n\nAuthor: Little Bow Wow \ud83d\udc15\nDate: 2025-07-31\n",
    "imports": [
      "typing.Any",
      "typing.Callable",
      "typing.Optional",
      "typing.List",
      "typing.Union",
      "typing.Iterator",
      "typing.TypeVar",
      "typing.Generic",
      "dataclasses.dataclass",
      "sqlglot",
      "sqlglot.exp"
    ],
    "classes": [
      {
        "name": "Iterator",
        "docstring": "jQuery-like iterator for SQL AST nodes with type safety.",
        "bases": [
          "Generic[T]"
        ],
        "decorators": [],
        "methods": [
          {
            "name": "__init__",
            "params": [
              "self",
              "node",
              "node_type",
              "predicate"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "__iter__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "map",
            "params": [
              "self",
              "fn"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "filter",
            "params": [
              "self",
              "fn"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "replaceWith",
            "params": [
              "self",
              "fn"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "forEach",
            "params": [
              "self",
              "fn"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "first",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "toList",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "count",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          }
        ],
        "properties": [],
        "class_variables": []
      },
      {
        "name": "SQLNode",
        "docstring": "Wrapper for sqlglot Expression nodes.",
        "bases": [],
        "decorators": [],
        "methods": [
          {
            "name": "__init__",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "find",
            "params": [
              "self",
              "node_type",
              "predicate"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "findAll",
            "params": [
              "self",
              "node_type"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "parent",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "replaceWith",
            "params": [
              "self",
              "new_node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "remove",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "sql",
            "params": [
              "self",
              "dialect",
              "pretty"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "transform",
            "params": [
              "self",
              "fn"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "__repr__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "__getattr__",
            "params": [
              "self",
              "name"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": true
          }
        ],
        "properties": [],
        "class_variables": []
      },
      {
        "name": "j",
        "docstring": "Builder functions for SQL AST nodes.",
        "bases": [],
        "decorators": [],
        "methods": [
          {
            "name": "parse",
            "params": [
              "sql",
              "dialect"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "parseMany",
            "params": [
              "sql",
              "dialect"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "Iterator",
            "params": [
              "node",
              "node_type",
              "predicate"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "Select",
            "params": [],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "Column",
            "params": [
              "name",
              "table"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "Table",
            "params": [
              "name",
              "db",
              "catalog"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "Literal",
            "params": [
              "value"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "Null",
            "params": [],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "Case",
            "params": [],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "When",
            "params": [
              "condition",
              "result"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "And",
            "params": [],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "Or",
            "params": [],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "Eq",
            "params": [
              "left",
              "right"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "Func",
            "params": [
              "name"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "Cast",
            "params": [
              "expr",
              "to",
              "safe"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "Alias",
            "params": [
              "expr",
              "alias"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "CTE",
            "params": [
              "name",
              "query"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "Window",
            "params": [
              "func",
              "partition_by",
              "order_by"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "__new__",
            "params": [
              "cls",
              "expr",
              "alias"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": true
          }
        ],
        "properties": [],
        "class_variables": []
      },
      {
        "name": "Pattern",
        "docstring": "Pattern matching helper for AST nodes.",
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "matches",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          }
        ],
        "properties": [],
        "class_variables": [
          "node_type",
          "conditions"
        ]
      },
      {
        "name": "PatternMatcher",
        "docstring": "Advanced pattern matching for AST transformations.",
        "bases": [],
        "decorators": [],
        "methods": [
          {
            "name": "match_case_when_null_to_default",
            "params": [
              "node"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "match_string_comparison_pattern",
            "params": [
              "node"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          }
        ],
        "properties": [],
        "class_variables": []
      }
    ],
    "functions": [
      {
        "name": "null_safe_eq",
        "params": [
          "left",
          "right"
        ],
        "decorators": [],
        "has_docstring": true,
        "is_async": false
      },
      {
        "name": "standardize_string_id",
        "params": [
          "col"
        ],
        "decorators": [],
        "has_docstring": true,
        "is_async": false
      },
      {
        "name": "standardize_numeric",
        "params": [
          "col"
        ],
        "decorators": [],
        "has_docstring": true,
        "is_async": false
      },
      {
        "name": "standardize_boolean",
        "params": [
          "col"
        ],
        "decorators": [],
        "has_docstring": true,
        "is_async": false
      },
      {
        "name": "deep_copy_transform",
        "params": [
          "node",
          "transform_fn"
        ],
        "decorators": [],
        "has_docstring": true,
        "is_async": false
      },
      {
        "name": "extract_table_references",
        "params": [
          "ast"
        ],
        "decorators": [],
        "has_docstring": true,
        "is_async": false
      },
      {
        "name": "inject_cte",
        "params": [
          "ast",
          "cte_name",
          "cte_query"
        ],
        "decorators": [],
        "has_docstring": true,
        "is_async": false
      }
    ],
    "constants": [
      "T"
    ]
  },
  "builders.py": {
    "filename": "builders.py",
    "lines": 423,
    "module_doc": "\nBigQuery SQL AST Builder Functions\n\nProvides a fluent API for constructing BigQuery SQL AST nodes,\ninspired by ast-types builders pattern.\n\nAuthor: Little Bow Wow \ud83d\udc15\nDate: 2025-07-31\n",
    "imports": [
      "typing.Any",
      "typing.List",
      "typing.Optional",
      "typing.Union",
      "typing.Dict",
      "dataclasses.dataclass",
      "dataclasses.field",
      "types.ASTNode",
      "types.Expression",
      "types.Identifier",
      "types.Literal",
      "types.BinaryOp",
      "types.UnaryOp",
      "types.FunctionCall",
      "types.Cast",
      "types.Case",
      "types.WindowFunction",
      "types.ArrayLiteral",
      "types.StructLiteral",
      "types.Star",
      "types.SelectColumn",
      "types.TableRef",
      "types.OrderByClause",
      "types.OrderByItem",
      "types.WhenClause",
      "types.StringLiteral",
      "types.IntegerLiteral",
      "types.FloatLiteral",
      "types.BooleanLiteral",
      "types.NullLiteral",
      "types.DateLiteral",
      "types.TimestampLiteral",
      "types.SetOperation",
      "types.SetOperator",
      "types.Select",
      "types.TableName"
    ],
    "classes": [
      {
        "name": "ValidationError",
        "docstring": "Custom exception for builder validation errors in BigQuery AST.",
        "bases": [
          "Exception"
        ],
        "decorators": [],
        "methods": [],
        "properties": [],
        "class_variables": []
      },
      {
        "name": "Builders",
        "docstring": "Builder functions for creating AST nodes.",
        "bases": [],
        "decorators": [],
        "methods": [
          {
            "name": "col",
            "params": [
              "name",
              "table"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "id",
            "params": [
              "name"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "lit",
            "params": [
              "value"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "null",
            "params": [],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "true",
            "params": [],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "false",
            "params": [],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "date",
            "params": [
              "value"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "timestamp",
            "params": [
              "value"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "eq",
            "params": [
              "left",
              "right"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "neq",
            "params": [
              "left",
              "right"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "lt",
            "params": [
              "left",
              "right"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "lte",
            "params": [
              "left",
              "right"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "gt",
            "params": [
              "left",
              "right"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "gte",
            "params": [
              "left",
              "right"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "and_",
            "params": [],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "or_",
            "params": [],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "not_",
            "params": [
              "expr"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "is_null",
            "params": [
              "expr"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "is_not_null",
            "params": [
              "expr"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "is_",
            "params": [
              "expr",
              "value"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "is_not",
            "params": [
              "expr",
              "value"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "func",
            "params": [
              "name"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "coalesce",
            "params": [],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "nullif",
            "params": [
              "expr",
              "value"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "trim",
            "params": [
              "expr"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "concat",
            "params": [],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "current_timestamp",
            "params": [],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "timestamp_func",
            "params": [
              "expr",
              "timezone"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "cast",
            "params": [
              "expr",
              "target_type"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "safe_cast",
            "params": [
              "expr",
              "target_type"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "case",
            "params": [],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "when",
            "params": [
              "condition",
              "result"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "row_number",
            "params": [],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "rank",
            "params": [],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "array",
            "params": [],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "struct",
            "params": [],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "star",
            "params": [
              "except_columns"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "select_col",
            "params": [
              "expr",
              "alias"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "table",
            "params": [
              "name",
              "alias"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "null_safe_eq",
            "params": [
              "left",
              "right"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "set_op",
            "params": [
              "left",
              "right",
              "operator",
              "all"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "union",
            "params": [
              "left",
              "right",
              "all"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "intersect",
            "params": [
              "left",
              "right",
              "all"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "except_",
            "params": [
              "left",
              "right",
              "all"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          }
        ],
        "properties": [],
        "class_variables": []
      }
    ],
    "functions": [],
    "constants": []
  },
  "collection.py": {
    "filename": "collection.py",
    "lines": 435,
    "module_doc": "\nAST Collection - jQuery-like API for working with sets of AST nodes\n\nInspired by jscodeshift's Collection API, provides chainable methods\nfor finding, filtering, and transforming AST nodes.\n\nAuthor: Little Bow Wow \ud83d\udc15\nDate: 2025-07-31\n",
    "imports": [
      "typing.List",
      "typing.Callable",
      "typing.Optional",
      "typing.Any",
      "typing.Union",
      "typing.TypeVar",
      "typing.Generic",
      "node_path.NodePath",
      "visitor.BaseVisitor",
      "visitor.visit",
      "types.ASTNode",
      "node_path.NodePath",
      "visitor.BaseVisitor",
      "visitor.visit",
      "types.ASTNode"
    ],
    "classes": [
      {
        "name": "Collection",
        "docstring": "\n    A collection of NodePath objects with chainable API.\n    Similar to jscodeshift's Collection.\n    ",
        "bases": [
          "Generic[T]"
        ],
        "decorators": [],
        "methods": [
          {
            "name": "__init__",
            "params": [
              "self",
              "paths"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "__len__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "__iter__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "__getitem__",
            "params": [
              "self",
              "index"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "size",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "at",
            "params": [
              "self",
              "index"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "get",
            "params": [
              "self",
              "index"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "nodes",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "find",
            "params": [
              "self",
              "node_type",
              "predicate"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "filter",
            "params": [
              "self",
              "predicate"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "filterType",
            "params": [
              "self",
              "node_type"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "closest",
            "params": [
              "self",
              "node_type",
              "predicate"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "parent",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "children",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "forEach",
            "params": [
              "self",
              "callback"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "map",
            "params": [
              "self",
              "callback"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "some",
            "params": [
              "self",
              "predicate"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "every",
            "params": [
              "self",
              "predicate"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "replaceWith",
            "params": [
              "self",
              "replacement"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "remove",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "insertBefore",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "insertAfter",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "isEmpty",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "isNotEmpty",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "hasClass",
            "params": [
              "self",
              "node_type"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "getTypes",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "first",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "last",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "slice",
            "params": [
              "self",
              "start",
              "end"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "eq",
            "params": [
              "self",
              "index"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "toArray",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "unique",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "reverse",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "sortBy",
            "params": [
              "self",
              "key_func"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "getPath",
            "params": [
              "self",
              "field_path"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "getProp",
            "params": [
              "self",
              "prop_name"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          }
        ],
        "properties": [
          {
            "name": "length",
            "params": [
              "self"
            ],
            "decorators": [
              "property"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": true,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          }
        ],
        "class_variables": []
      }
    ],
    "functions": [
      {
        "name": "astCollection",
        "params": [
          "root"
        ],
        "decorators": [],
        "has_docstring": true,
        "is_async": false
      },
      {
        "name": "root",
        "params": [
          "root_node"
        ],
        "decorators": [],
        "has_docstring": true,
        "is_async": false
      },
      {
        "name": "create_collection",
        "params": [
          "root_node"
        ],
        "decorators": [],
        "has_docstring": true,
        "is_async": false
      }
    ],
    "constants": [
      "T"
    ]
  },
  "node_path.py": {
    "filename": "node_path.py",
    "lines": 355,
    "module_doc": "\nEnhanced NodePath for BigQuery AST\n\nProvides path tracking with parent/child relationships,\nfield information, and scope tracking.\n\nAuthor: Little Bow Wow \ud83d\udc15\nDate: 2025-07-31\n",
    "imports": [
      "typing.Any",
      "typing.List",
      "typing.Optional",
      "typing.Dict",
      "typing.Union",
      "typing.Callable",
      "typing.Iterator",
      "dataclasses.dataclass",
      "dataclasses.field",
      "types.ASTNode",
      "scope.Scope"
    ],
    "classes": [
      {
        "name": "NodePath",
        "docstring": "\n    Enhanced wrapper for AST nodes with ancestry and context tracking.\n    ",
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "__post_init__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": true
          },
          {
            "name": "get_children",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "_get_child_scope",
            "params": [
              "self",
              "field_name",
              "child_node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "_creates_new_scope",
            "params": [
              "self",
              "field_name",
              "child_node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "find_ancestor",
            "params": [
              "self",
              "predicate"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "find_descendants",
            "params": [
              "self",
              "predicate"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "replace",
            "params": [
              "self",
              "new_node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "remove",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "insert_before",
            "params": [
              "self",
              "new_node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "insert_after",
            "params": [
              "self",
              "new_node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "siblings",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "is_first_child",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "is_last_child",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "walk",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "__repr__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "__eq__",
            "params": [
              "self",
              "other"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": true
          },
          {
            "name": "__hash__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": true
          }
        ],
        "properties": [
          {
            "name": "depth",
            "params": [
              "self"
            ],
            "decorators": [
              "property"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": true,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "root",
            "params": [
              "self"
            ],
            "decorators": [
              "property"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": true,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "ancestors",
            "params": [
              "self"
            ],
            "decorators": [
              "property"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": true,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "path",
            "params": [
              "self"
            ],
            "decorators": [
              "property"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": true,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          }
        ],
        "class_variables": [
          "node",
          "parent",
          "field",
          "index",
          "scope",
          "_children",
          "_depth",
          "_root"
        ]
      }
    ],
    "functions": [
      {
        "name": "create_path",
        "params": [
          "node",
          "scope"
        ],
        "decorators": [],
        "has_docstring": true,
        "is_async": false
      },
      {
        "name": "get_node_at_path",
        "params": [
          "root",
          "path"
        ],
        "decorators": [],
        "has_docstring": true,
        "is_async": false
      }
    ],
    "constants": []
  },
  "scope.py": {
    "filename": "scope.py",
    "lines": 24,
    "module_doc": "",
    "imports": [],
    "classes": [
      {
        "name": "Scope",
        "docstring": "\n    Tracks name resolution context for SQL nodes (e.g., table aliases, CTEs).\n    ",
        "bases": [],
        "decorators": [],
        "methods": [
          {
            "name": "__init__",
            "params": [
              "self",
              "parent"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "declare",
            "params": [
              "self",
              "name",
              "value"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "lookup",
            "params": [
              "self",
              "name"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "get_bindings",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "is_global",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": []
      }
    ],
    "functions": [],
    "constants": []
  },
  "serializer.py": {
    "filename": "serializer.py",
    "lines": 723,
    "module_doc": "\nBigQuery SQL Serializer\n\nSerializes AST nodes back to BigQuery SQL.\nSimplified version for the basic types.\n\nAuthor: Little Bow Wow \ud83d\udc15\nDate: 2025-07-31\n",
    "imports": [
      "typing.Any",
      "typing.List",
      "typing.Optional",
      "typing.Set",
      "dataclasses.dataclass",
      "types.ASTNode",
      "types.ASTVisitor",
      "types.Identifier",
      "types.StringLiteral",
      "types.IntegerLiteral",
      "types.FloatLiteral",
      "types.BooleanLiteral",
      "types.NullLiteral",
      "types.BinaryOp",
      "types.UnaryOp",
      "types.FunctionCall",
      "types.Select",
      "types.SelectColumn",
      "types.TableRef",
      "types.TableName",
      "types.Join",
      "types.WhereClause",
      "types.GroupByClause",
      "types.HavingClause",
      "types.OrderByClause",
      "types.OrderByItem",
      "types.LimitClause",
      "types.CTE",
      "types.WithClause",
      "types.Merge",
      "types.MergeAction",
      "types.MergeInsert",
      "types.MergeUpdate",
      "types.MergeDelete",
      "types.WindowFunction",
      "types.WindowSpecification",
      "types.Subquery",
      "types.JoinType",
      "types.OrderDirection"
    ],
    "classes": [
      {
        "name": "SerializerOptions",
        "docstring": "Options for SQL serialization.",
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "methods": [],
        "properties": [],
        "class_variables": [
          "indent",
          "max_line_length",
          "uppercase_keywords",
          "quote_identifiers",
          "trailing_commas",
          "format_style"
        ]
      },
      {
        "name": "SQLSerializer",
        "docstring": "\n    Serializes AST nodes to BigQuery SQL with proper formatting.\n    ",
        "bases": [
          "ASTVisitor"
        ],
        "decorators": [],
        "methods": [
          {
            "name": "__init__",
            "params": [
              "self",
              "options"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "serialize",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "_write",
            "params": [
              "self",
              "text"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "_indent",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "_keyword",
            "params": [
              "self",
              "keyword"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_identifier",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_string_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_integer_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_float_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_boolean_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_null_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_binary_op",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_unary_op",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_function_call",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_table_name",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_table_ref",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_select_column",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_where_clause",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_group_by_clause",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_having_clause",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_order_by_item",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_order_by_clause",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_limit_clause",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_join",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_select",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_subquery",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_cte",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_with_clause",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_merge_insert",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_merge_update",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_merge_delete",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_merge_action",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_merge",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_window_specification",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_window_function",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_unquoted_identifier",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_quoted_identifier",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_enhanced_general_identifier",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_path_expression",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_path_part",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_column_name",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_field_name",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_bytes_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_numeric_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_bignumeric_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_date_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_time_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_datetime_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_timestamp_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_interval_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_array_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_struct_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_range_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_json_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_named_parameter",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_positional_parameter",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_comment",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_case",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_when_clause",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_insert",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_update",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_create_table",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_hash_comment",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_dash_comment",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "visit_block_comment",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          }
        ],
        "properties": [],
        "class_variables": []
      }
    ],
    "functions": [
      {
        "name": "to_sql",
        "params": [
          "node",
          "options"
        ],
        "decorators": [],
        "has_docstring": true,
        "is_async": false
      },
      {
        "name": "pretty_print",
        "params": [
          "node"
        ],
        "decorators": [],
        "has_docstring": true,
        "is_async": false
      },
      {
        "name": "compact_print",
        "params": [
          "node"
        ],
        "decorators": [],
        "has_docstring": true,
        "is_async": false
      }
    ],
    "constants": []
  },
  "types.py": {
    "filename": "types.py",
    "lines": 1419,
    "module_doc": "\nBigQuery AST Type Definitions\n\nComplete AST node definitions based on BigQuery lexical specification.\n\nAuthor: Little Bow Wow \ud83d\udc15\nDate: 2025-07-31\n",
    "imports": [
      "re",
      "typing.Any",
      "typing.List",
      "typing.Optional",
      "typing.Union",
      "typing.Dict",
      "typing.Tuple",
      "dataclasses.dataclass",
      "dataclasses.field",
      "enum.Enum",
      "abc.ABC",
      "abc.abstractmethod"
    ],
    "classes": [
      {
        "name": "ASTNode",
        "docstring": "Base class for all AST nodes.",
        "bases": [
          "ABC"
        ],
        "decorators": [],
        "methods": [
          {
            "name": "__init__",
            "params": [
              "self",
              "location"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          }
        ],
        "properties": [
          {
            "name": "node_type",
            "params": [
              "self"
            ],
            "decorators": [
              "property"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": true,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          }
        ],
        "class_variables": []
      },
      {
        "name": "ASTVisitor",
        "docstring": "Base visitor interface for AST traversal.",
        "bases": [
          "ABC"
        ],
        "decorators": [],
        "methods": [
          {
            "name": "visit_identifier",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_string_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_integer_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_float_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_boolean_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_null_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_binary_op",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_unary_op",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_function_call",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_table_name",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_table_ref",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_select_column",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_where_clause",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_group_by_clause",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_having_clause",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_order_by_item",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_order_by_clause",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_limit_clause",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_join",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_select",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_subquery",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_cte",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_with_clause",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_set_operation",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_merge_insert",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_merge_update",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_merge_delete",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_merge_action",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_merge",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_window_specification",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_window_function",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_unquoted_identifier",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_quoted_identifier",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_enhanced_general_identifier",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_path_expression",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_path_part",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_column_name",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_field_name",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_bytes_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_numeric_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_bignumeric_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_date_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_time_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_datetime_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_timestamp_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_interval_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_array_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_struct_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_range_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_json_literal",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_named_parameter",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_positional_parameter",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_comment",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_case",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_when_clause",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_insert",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_update",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_create_table",
            "params": [
              "self",
              "node"
            ],
            "decorators": [
              "abstractmethod"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_hash_comment",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_dash_comment",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "visit_block_comment",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "generic_visit",
            "params": [
              "self",
              "node"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          }
        ],
        "properties": [],
        "class_variables": []
      },
      {
        "name": "JoinType",
        "docstring": "",
        "bases": [
          "Enum"
        ],
        "decorators": [],
        "methods": [],
        "properties": [],
        "class_variables": [
          "INNER",
          "LEFT",
          "RIGHT",
          "FULL",
          "CROSS"
        ]
      },
      {
        "name": "ComparisonOp",
        "docstring": "",
        "bases": [
          "Enum"
        ],
        "decorators": [],
        "methods": [],
        "properties": [],
        "class_variables": [
          "EQ",
          "NE",
          "LT",
          "LE",
          "GT",
          "GE",
          "LIKE",
          "IN"
        ]
      },
      {
        "name": "LogicalOp",
        "docstring": "",
        "bases": [
          "Enum"
        ],
        "decorators": [],
        "methods": [],
        "properties": [],
        "class_variables": [
          "AND",
          "OR",
          "NOT"
        ]
      },
      {
        "name": "ArithmeticOp",
        "docstring": "",
        "bases": [
          "Enum"
        ],
        "decorators": [],
        "methods": [],
        "properties": [],
        "class_variables": [
          "ADD",
          "SUB",
          "MUL",
          "DIV",
          "MOD"
        ]
      },
      {
        "name": "OrderDirection",
        "docstring": "",
        "bases": [
          "Enum"
        ],
        "decorators": [],
        "methods": [],
        "properties": [],
        "class_variables": [
          "ASC",
          "DESC"
        ]
      },
      {
        "name": "SourceLocation",
        "docstring": "Source location information.",
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "methods": [],
        "properties": [],
        "class_variables": [
          "line",
          "column",
          "offset",
          "length"
        ]
      },
      {
        "name": "Expression",
        "docstring": "Base class for all expressions.",
        "bases": [
          "ASTNode"
        ],
        "decorators": [],
        "methods": [],
        "properties": [],
        "class_variables": []
      },
      {
        "name": "Statement",
        "docstring": "Base class for all statements.",
        "bases": [
          "ASTNode"
        ],
        "decorators": [],
        "methods": [],
        "properties": [],
        "class_variables": []
      },
      {
        "name": "Identifier",
        "docstring": "Column or table identifier.",
        "bases": [
          "Expression"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "__str__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "name",
          "table"
        ]
      },
      {
        "name": "UnquotedIdentifier",
        "docstring": "Unquoted identifier - must begin with letter or underscore.",
        "bases": [
          "Identifier"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": []
      },
      {
        "name": "QuotedIdentifier",
        "docstring": "Quoted identifier - enclosed by backticks, can contain any characters.",
        "bases": [
          "Identifier"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": []
      },
      {
        "name": "EnhancedGeneralIdentifier",
        "docstring": "Enhanced general identifier supporting complex path expressions.",
        "bases": [
          "Identifier"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "parts",
          "separators"
        ]
      },
      {
        "name": "PathExpression",
        "docstring": "Path expression for navigating object graphs.",
        "bases": [
          "Expression"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "parts"
        ]
      },
      {
        "name": "PathPart",
        "docstring": "Part of a path expression.",
        "bases": [
          "Expression"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "value",
          "separator"
        ]
      },
      {
        "name": "TableName",
        "docstring": "Table name with optional project and dataset qualification.",
        "bases": [
          "Expression"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "table",
          "dataset",
          "project",
          "supports_dashes"
        ]
      },
      {
        "name": "ColumnName",
        "docstring": "Column name with dash support.",
        "bases": [
          "Expression"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "name",
          "supports_dashes"
        ]
      },
      {
        "name": "FieldName",
        "docstring": "Field name for struct and JSON objects.",
        "bases": [
          "Expression"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "__str__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "name"
        ]
      },
      {
        "name": "Literal",
        "docstring": "Base class for literal values.",
        "bases": [
          "Expression"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "value",
          "type"
        ]
      },
      {
        "name": "StringLiteral",
        "docstring": "String literal with BigQuery formatting options.",
        "bases": [
          "Literal"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "__post_init__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "__str__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "quote_style",
          "is_raw",
          "is_bytes"
        ]
      },
      {
        "name": "BytesLiteral",
        "docstring": "Bytes literal with formatting options.",
        "bases": [
          "Literal"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "quote_style",
          "is_raw"
        ]
      },
      {
        "name": "IntegerLiteral",
        "docstring": "Integer literal.",
        "bases": [
          "Literal"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "__post_init__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "__str__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "is_hexadecimal"
        ]
      },
      {
        "name": "NumericLiteral",
        "docstring": "NUMERIC literal - exact decimal.",
        "bases": [
          "Literal"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": []
      },
      {
        "name": "BigNumericLiteral",
        "docstring": "BIGNUMERIC literal - high precision decimal.",
        "bases": [
          "Literal"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": []
      },
      {
        "name": "BooleanLiteral",
        "docstring": "Boolean literal.",
        "bases": [
          "Literal"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "__post_init__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "__str__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": []
      },
      {
        "name": "FloatLiteral",
        "docstring": "Float literal.",
        "bases": [
          "Literal"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "__post_init__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "__str__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": []
      },
      {
        "name": "NullLiteral",
        "docstring": "NULL literal.",
        "bases": [
          "Literal"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "__post_init__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "__str__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "value"
        ]
      },
      {
        "name": "DateLiteral",
        "docstring": "DATE literal.",
        "bases": [
          "Literal"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "__post_init__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "__str__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": []
      },
      {
        "name": "TimeLiteral",
        "docstring": "TIME literal.",
        "bases": [
          "Literal"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": []
      },
      {
        "name": "DatetimeLiteral",
        "docstring": "DATETIME literal.",
        "bases": [
          "Literal"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": []
      },
      {
        "name": "TimestampLiteral",
        "docstring": "TIMESTAMP literal.",
        "bases": [
          "Literal"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "__post_init__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "__str__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "timezone"
        ]
      },
      {
        "name": "IntervalLiteral",
        "docstring": "INTERVAL literal.",
        "bases": [
          "Literal"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "from_part",
          "to_part"
        ]
      },
      {
        "name": "ArrayLiteral",
        "docstring": "Array literal.",
        "bases": [
          "Literal"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "__post_init__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "__str__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "elements",
          "element_type"
        ]
      },
      {
        "name": "StructLiteral",
        "docstring": "Struct literal.",
        "bases": [
          "Literal"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "__post_init__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "__str__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "fields",
          "struct_type"
        ]
      },
      {
        "name": "RangeLiteral",
        "docstring": "RANGE literal.",
        "bases": [
          "Literal"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "__post_init__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          },
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "range_type",
          "lower_bound",
          "upper_bound",
          "lower_unbounded",
          "upper_unbounded"
        ]
      },
      {
        "name": "JSONLiteral",
        "docstring": "JSON literal.",
        "bases": [
          "Literal"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": []
      },
      {
        "name": "NamedParameter",
        "docstring": "Named query parameter (@param).",
        "bases": [
          "Expression"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "name"
        ]
      },
      {
        "name": "PositionalParameter",
        "docstring": "Positional query parameter (?).",
        "bases": [
          "Expression"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "position"
        ]
      },
      {
        "name": "Comment",
        "docstring": "Comment node to preserve comments in AST.",
        "bases": [
          "ASTNode"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "text",
          "style",
          "is_multiline"
        ]
      },
      {
        "name": "HashComment",
        "docstring": "Single-line comment using #.",
        "bases": [
          "Comment"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "__init__",
            "params": [
              "self",
              "text"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": []
      },
      {
        "name": "DashComment",
        "docstring": "Single-line comment using --.",
        "bases": [
          "Comment"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "__init__",
            "params": [
              "self",
              "text"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": []
      },
      {
        "name": "BlockComment",
        "docstring": "Block comment enclosed in /* */.",
        "bases": [
          "Comment"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "__init__",
            "params": [
              "self",
              "text",
              "is_multiline"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": []
      },
      {
        "name": "BinaryOp",
        "docstring": "Binary operation.",
        "bases": [
          "Expression"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "__str__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "left",
          "operator",
          "right"
        ]
      },
      {
        "name": "UnaryOp",
        "docstring": "Unary operation.",
        "bases": [
          "Expression"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "__str__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "operator",
          "operand"
        ]
      },
      {
        "name": "FunctionCall",
        "docstring": "Function call expression.",
        "bases": [
          "Expression"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "__str__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          }
        ],
        "properties": [
          {
            "name": "name",
            "params": [
              "self"
            ],
            "decorators": [
              "property"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": true,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "args",
            "params": [
              "self"
            ],
            "decorators": [
              "property"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": true,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          }
        ],
        "class_variables": [
          "function_name",
          "arguments"
        ]
      },
      {
        "name": "Cast",
        "docstring": "CAST expression.",
        "bases": [
          "Expression"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "__str__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "expr",
          "target_type",
          "safe"
        ]
      },
      {
        "name": "TableRef",
        "docstring": "Table reference in FROM clause.",
        "bases": [
          "ASTNode"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "table",
          "alias"
        ]
      },
      {
        "name": "SelectColumn",
        "docstring": "Column selected in a SELECT list.",
        "bases": [
          "ASTNode"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "expression",
          "alias"
        ]
      },
      {
        "name": "WhereClause",
        "docstring": "WHERE clause.",
        "bases": [
          "ASTNode"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "condition"
        ]
      },
      {
        "name": "GroupByClause",
        "docstring": "GROUP BY clause.",
        "bases": [
          "ASTNode"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "expressions"
        ]
      },
      {
        "name": "HavingClause",
        "docstring": "HAVING clause.",
        "bases": [
          "ASTNode"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "condition"
        ]
      },
      {
        "name": "OrderByItem",
        "docstring": "Single ORDER BY item.",
        "bases": [
          "ASTNode"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "__str__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "expression",
          "direction"
        ]
      },
      {
        "name": "OrderByClause",
        "docstring": "ORDER BY clause.",
        "bases": [
          "ASTNode"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "__init__",
            "params": [
              "self",
              "items",
              "expr",
              "direction"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": true
          },
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "items"
        ]
      },
      {
        "name": "LimitClause",
        "docstring": "LIMIT clause.",
        "bases": [
          "ASTNode"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "limit",
          "offset"
        ]
      },
      {
        "name": "Join",
        "docstring": "JOIN clause.",
        "bases": [
          "ASTNode"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "join_type",
          "table",
          "condition"
        ]
      },
      {
        "name": "Select",
        "docstring": "SELECT statement.",
        "bases": [
          "Statement"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "select_list",
          "from_clause",
          "distinct",
          "joins",
          "where_clause",
          "group_by_clause",
          "having_clause",
          "order_by_clause",
          "limit_clause",
          "with_clause"
        ]
      },
      {
        "name": "Subquery",
        "docstring": "Subquery expression.",
        "bases": [
          "Expression"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "query",
          "alias"
        ]
      },
      {
        "name": "CTE",
        "docstring": "Common table expression.",
        "bases": [
          "ASTNode"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "name",
          "query",
          "columns"
        ]
      },
      {
        "name": "WithClause",
        "docstring": "WITH clause containing CTEs.",
        "bases": [
          "ASTNode"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "ctes"
        ]
      },
      {
        "name": "SetOperator",
        "docstring": "Set operation types for combining SELECT statements.",
        "bases": [
          "Enum"
        ],
        "decorators": [],
        "methods": [],
        "properties": [],
        "class_variables": [
          "UNION",
          "INTERSECT",
          "EXCEPT"
        ]
      },
      {
        "name": "SetOperation",
        "docstring": "Set operation combining two statements.",
        "bases": [
          "Statement"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "left",
          "right",
          "operator",
          "all"
        ]
      },
      {
        "name": "MergeInsert",
        "docstring": "INSERT action in MERGE statement.",
        "bases": [
          "ASTNode"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "columns",
          "values"
        ]
      },
      {
        "name": "MergeUpdate",
        "docstring": "UPDATE action in MERGE statement.",
        "bases": [
          "ASTNode"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "assignments"
        ]
      },
      {
        "name": "MergeDelete",
        "docstring": "DELETE action in MERGE statement.",
        "bases": [
          "ASTNode"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": []
      },
      {
        "name": "MergeAction",
        "docstring": "WHEN ... THEN action in MERGE.",
        "bases": [
          "ASTNode"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "action",
          "condition"
        ]
      },
      {
        "name": "Merge",
        "docstring": "MERGE statement.",
        "bases": [
          "Statement"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "target_table",
          "source_table",
          "merge_condition",
          "actions"
        ]
      },
      {
        "name": "WindowSpecification",
        "docstring": "Window specification for window functions.",
        "bases": [
          "ASTNode"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "partition_by",
          "order_by"
        ]
      },
      {
        "name": "WindowFunction",
        "docstring": "Window function call.",
        "bases": [
          "Expression"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "partition_by",
            "params": [
              "self",
              "value"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "order_by",
            "params": [
              "self",
              "value"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "__str__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          }
        ],
        "properties": [
          {
            "name": "name",
            "params": [
              "self"
            ],
            "decorators": [
              "property"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": true,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "args",
            "params": [
              "self"
            ],
            "decorators": [
              "property"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": true,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "partition_by",
            "params": [
              "self"
            ],
            "decorators": [
              "property"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": true,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "order_by",
            "params": [
              "self"
            ],
            "decorators": [
              "property"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": true,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          }
        ],
        "class_variables": [
          "function_name",
          "arguments",
          "window_spec"
        ]
      },
      {
        "name": "WhenClause",
        "docstring": "WHEN clause in CASE expression.",
        "bases": [
          "ASTNode"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "__str__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "condition",
          "result"
        ]
      },
      {
        "name": "Case",
        "docstring": "CASE expression.",
        "bases": [
          "Expression"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "__str__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          }
        ],
        "properties": [
          {
            "name": "when_clauses",
            "params": [
              "self"
            ],
            "decorators": [
              "property"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": true,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "else_clause",
            "params": [
              "self"
            ],
            "decorators": [
              "property"
            ],
            "is_static": false,
            "is_class": false,
            "is_property": true,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          }
        ],
        "class_variables": [
          "whens",
          "else_result"
        ]
      },
      {
        "name": "Insert",
        "docstring": "INSERT statement supporting VALUES or SELECT.",
        "bases": [
          "Statement"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "table",
          "columns",
          "values",
          "query"
        ]
      },
      {
        "name": "Update",
        "docstring": "UPDATE statement.",
        "bases": [
          "Statement"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "table",
          "assignments",
          "where"
        ]
      },
      {
        "name": "CreateTable",
        "docstring": "CREATE TABLE statement.",
        "bases": [
          "Statement"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "table"
        ]
      },
      {
        "name": "Star",
        "docstring": "SELECT * expression.",
        "bases": [
          "Expression"
        ],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "accept",
            "params": [
              "self",
              "visitor"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "__str__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": [
          "except_columns"
        ]
      },
      {
        "name": "BQDataType",
        "docstring": "BigQuery base data types.",
        "bases": [
          "Enum"
        ],
        "decorators": [],
        "methods": [],
        "properties": [],
        "class_variables": [
          "INT64",
          "FLOAT64",
          "NUMERIC",
          "BIGNUMERIC",
          "BOOL",
          "STRING",
          "BYTES",
          "DATE",
          "TIME",
          "DATETIME",
          "TIMESTAMP",
          "GEOGRAPHY",
          "INTERVAL",
          "JSON",
          "ARRAY",
          "STRUCT",
          "RANGE"
        ]
      },
      {
        "name": "TypeParameter",
        "docstring": "Parameter for parameterized types.",
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "methods": [],
        "properties": [],
        "class_variables": [
          "name",
          "value"
        ]
      },
      {
        "name": "BigQueryType",
        "docstring": "Complete BigQuery type with parameters and nested types.",
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "methods": [
          {
            "name": "__str__",
            "params": [
              "self"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": true,
            "has_docstring": true
          }
        ],
        "properties": [],
        "class_variables": [
          "base_type",
          "parameters",
          "element_type",
          "fields",
          "range_type"
        ]
      },
      {
        "name": "TypeParser",
        "docstring": "Parser for BigQuery type strings.",
        "bases": [],
        "decorators": [],
        "methods": [
          {
            "name": "parse",
            "params": [
              "type_str"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "_parse_array",
            "params": [
              "type_str"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "_parse_struct",
            "params": [
              "type_str"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "_parse_range",
            "params": [
              "type_str"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "_parse_parameterized",
            "params": [
              "base_name",
              "params_str"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "_extract_angle_bracket_content",
            "params": [
              "type_str"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "_split_fields",
            "params": [
              "content"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": true,
            "is_dunder": false,
            "has_docstring": true
          }
        ],
        "properties": [],
        "class_variables": []
      },
      {
        "name": "TypeValidator",
        "docstring": "Validator for BigQuery types and values.",
        "bases": [],
        "decorators": [],
        "methods": [
          {
            "name": "validate_type",
            "params": [
              "type_"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "validate_value",
            "params": [
              "value",
              "type_"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          }
        ],
        "properties": [],
        "class_variables": []
      },
      {
        "name": "TypeCaster",
        "docstring": "Type casting utilities for BigQuery.",
        "bases": [],
        "decorators": [],
        "methods": [
          {
            "name": "can_cast",
            "params": [
              "from_type",
              "to_type"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "find_common_supertype",
            "params": [
              "types"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          },
          {
            "name": "requires_safe_cast",
            "params": [
              "from_type",
              "to_type"
            ],
            "decorators": [
              "staticmethod"
            ],
            "is_static": true,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": true
          }
        ],
        "properties": [],
        "class_variables": []
      }
    ],
    "functions": [],
    "constants": [
      "TYPE_ALIASES"
    ]
  },
  "visitor.py": {
    "filename": "visitor.py",
    "lines": 21,
    "module_doc": "",
    "imports": [
      "node_path.NodePath"
    ],
    "classes": [
      {
        "name": "BaseVisitor",
        "docstring": "",
        "bases": [],
        "decorators": [],
        "methods": [
          {
            "name": "visit",
            "params": [
              "self",
              "path"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          },
          {
            "name": "generic_visit",
            "params": [
              "self",
              "path"
            ],
            "decorators": [],
            "is_static": false,
            "is_class": false,
            "is_property": false,
            "is_private": false,
            "is_dunder": false,
            "has_docstring": false
          }
        ],
        "properties": [],
        "class_variables": []
      }
    ],
    "functions": [
      {
        "name": "visit",
        "params": [
          "ast_root",
          "visitor"
        ],
        "decorators": [],
        "has_docstring": true,
        "is_async": false
      }
    ],
    "constants": []
  }
}