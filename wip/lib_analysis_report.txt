================================================================================
BIGQUERY AST TYPES LIBRARY ANALYSIS REPORT
================================================================================

SUMMARY
----------------------------------------
Total Files: 9
Total Lines: 3,860
Total Classes: 94
Total Functions: 16

================================================================================
FILE: __init__.py
================================================================================
MODULE DOCSTRING:
  
  BigQuery AST Types Library
  
  ...

Lines of Code: 31
Imports: 16

================================================================================
FILE: bsql.py
================================================================================
MODULE DOCSTRING:
  
  BigQuery SQL Transformation Wrapper
  
  ...

Lines of Code: 429
Imports: 11

CLASSES (5):
----------------------------------------

  class Iterator(Generic[T]):
    Doc: jQuery-like iterator for SQL AST nodes with type safety....
    Methods (9):
      - __init__(node, node_type, predicate)
      Dunder methods: __iter__
      - map(fn)
      - filter(fn)
      - replaceWith(fn)
      - forEach(fn)
      - first()
      ... and 2 more public methods

  class SQLNode:
    Doc: Wrapper for sqlglot Expression nodes....
    Methods (10):
      - __init__(node)
      Dunder methods: __repr__, __getattr__
      - find(node_type, predicate)
      - findAll(node_type)
      - parent()
      - replaceWith(new_node)
      - remove()
      ... and 2 more public methods

  class j:
    Doc: Builder functions for SQL AST nodes....
    Methods (19):
      Dunder methods: __new__
      - parse(dialect) [staticmethod]
      - parseMany(dialect) [staticmethod]
      - Iterator(node_type, predicate) [staticmethod]
      - Select() [staticmethod]
      - Column(table) [staticmethod]
      ... and 13 more public methods

  class Pattern:
    Decorators: dataclass
    Doc: Pattern matching helper for AST nodes....
    Class Variables: node_type, conditions
    Methods (1):
      - matches(node)

  class PatternMatcher:
    Doc: Advanced pattern matching for AST transformations....
    Methods (2):
      - match_case_when_null_to_default() [staticmethod]
      - match_string_comparison_pattern() [staticmethod]

FUNCTIONS (7):
----------------------------------------
  - null_safe_eq(left, right) [documented]
  - standardize_string_id(col) [documented]
  - standardize_numeric(col) [documented]
  - standardize_boolean(col) [documented]
  - deep_copy_transform(node, transform_fn) [documented]
  - extract_table_references(ast) [documented]
  - inject_cte(ast, cte_name, cte_query) [documented]

CONSTANTS (1):
----------------------------------------
  - T

================================================================================
FILE: builders.py
================================================================================
MODULE DOCSTRING:
  
  BigQuery SQL AST Builder Functions
  
  ...

Lines of Code: 423
Imports: 36

CLASSES (2):
----------------------------------------

  class ValidationError(Exception):
    Doc: Custom exception for builder validation errors in BigQuery A...

  class Builders:
    Doc: Builder functions for creating AST nodes....
    Methods (44):
      - col(table) [staticmethod]
      - id() [staticmethod]
      - lit() [staticmethod]
      - null() [staticmethod]
      - true() [staticmethod]
      ... and 39 more public methods

================================================================================
FILE: collection.py
================================================================================
MODULE DOCSTRING:
  
  AST Collection - jQuery-like API for working with sets of AST nodes
  
  ...

Lines of Code: 435
Imports: 15

CLASSES (1):
----------------------------------------

  class Collection(Generic[T]):
    Doc: ...
    Methods (36):
      - __init__(paths)
      Dunder methods: __len__, __iter__, __getitem__
      - size()
      - at(index)
      - get(index)
      - nodes()
      - find(node_type, predicate)
      ... and 27 more public methods
    Properties (1):
      - length

FUNCTIONS (3):
----------------------------------------
  - astCollection(root) [documented]
  - root(root_node) [documented]
  - create_collection(root_node) [documented]

CONSTANTS (1):
----------------------------------------
  - T

================================================================================
FILE: node_path.py
================================================================================
MODULE DOCSTRING:
  
  Enhanced NodePath for BigQuery AST
  
  ...

Lines of Code: 355
Imports: 11

CLASSES (1):
----------------------------------------

  class NodePath:
    Decorators: dataclass
    Doc: ...
    Class Variables: node, parent, field, index, scope
    Methods (17):
      Dunder methods: __post_init__, __repr__, __eq__, __hash__
      - get_children()
      - find_ancestor(predicate)
      - find_descendants(predicate)
      - replace(new_node)
      - remove()
      ... and 6 more public methods
      Private methods: _get_child_scope, _creates_new_scope
    Properties (4):
      - depth
      - root
      - ancestors
      - path

FUNCTIONS (2):
----------------------------------------
  - create_path(node, scope) [documented]
  - get_node_at_path(root, path) [documented]

================================================================================
FILE: scope.py
================================================================================
Lines of Code: 24
Imports: 0

CLASSES (1):
----------------------------------------

  class Scope:
    Doc: ...
    Methods (5):
      - __init__(parent)
      - declare(name, value)
      - lookup(name)
      - get_bindings()
      - is_global()

================================================================================
FILE: serializer.py
================================================================================
MODULE DOCSTRING:
  
  BigQuery SQL Serializer
  
  ...

Lines of Code: 723
Imports: 39

CLASSES (2):
----------------------------------------

  class SerializerOptions:
    Decorators: dataclass
    Doc: Options for SQL serialization....
    Class Variables: indent, max_line_length, uppercase_keywords, quote_identifiers, trailing_commas

  class SQLSerializer(ASTVisitor):
    Doc: ...
    Methods (66):
      - __init__(options)
      - serialize(node)
      - visit_identifier(node)
      - visit_literal(node)
      - visit_string_literal(node)
      - visit_integer_literal(node)
      ... and 57 more public methods
      Private methods: _write, _indent, _keyword

FUNCTIONS (3):
----------------------------------------
  - to_sql(node, options) [documented]
  - pretty_print(node) [documented]
  - compact_print(node) [documented]

================================================================================
FILE: types.py
================================================================================
MODULE DOCSTRING:
  
  BigQuery AST Type Definitions
  
  ...

Lines of Code: 1419
Imports: 12

CLASSES (81):
----------------------------------------

  class ASTNode(ABC):
    Doc: Base class for all AST nodes....
    Methods (2):
      - __init__(location)
      - accept(visitor) [abstractmethod]
    Properties (1):
      - node_type

  class ASTVisitor(ABC):
    Doc: Base visitor interface for AST traversal....
    Methods (63):
      - visit_identifier(node) [abstractmethod]
      - visit_literal(node) [abstractmethod]
      - visit_string_literal(node) [abstractmethod]
      - visit_integer_literal(node) [abstractmethod]
      - visit_float_literal(node) [abstractmethod]
      ... and 58 more public methods

  class JoinType(Enum):
    Class Variables: INNER, LEFT, RIGHT, FULL, CROSS

  class ComparisonOp(Enum):
    Class Variables: EQ, NE, LT, LE, GT

  class LogicalOp(Enum):
    Class Variables: AND, OR, NOT

  class ArithmeticOp(Enum):
    Class Variables: ADD, SUB, MUL, DIV, MOD

  class OrderDirection(Enum):
    Class Variables: ASC, DESC

  class SourceLocation:
    Decorators: dataclass
    Doc: Source location information....
    Class Variables: line, column, offset, length

  class Expression(ASTNode):
    Doc: Base class for all expressions....

  class Statement(ASTNode):
    Doc: Base class for all statements....

  class Identifier(Expression):
    Decorators: dataclass
    Doc: Column or table identifier....
    Class Variables: name, table
    Methods (2):
      Dunder methods: __str__
      - accept(visitor)

  class UnquotedIdentifier(Identifier):
    Decorators: dataclass
    Doc: Unquoted identifier - must begin with letter or underscore....
    Methods (1):
      - accept(visitor)

  class QuotedIdentifier(Identifier):
    Decorators: dataclass
    Doc: Quoted identifier - enclosed by backticks, can contain any c...
    Methods (1):
      - accept(visitor)

  class EnhancedGeneralIdentifier(Identifier):
    Decorators: dataclass
    Doc: Enhanced general identifier supporting complex path expressi...
    Class Variables: parts, separators
    Methods (1):
      - accept(visitor)

  class PathExpression(Expression):
    Decorators: dataclass
    Doc: Path expression for navigating object graphs....
    Class Variables: parts
    Methods (1):
      - accept(visitor)

  class PathPart(Expression):
    Decorators: dataclass
    Doc: Part of a path expression....
    Class Variables: value, separator
    Methods (1):
      - accept(visitor)

  class TableName(Expression):
    Decorators: dataclass
    Doc: Table name with optional project and dataset qualification....
    Class Variables: table, dataset, project, supports_dashes
    Methods (1):
      - accept(visitor)

  class ColumnName(Expression):
    Decorators: dataclass
    Doc: Column name with dash support....
    Class Variables: name, supports_dashes
    Methods (1):
      - accept(visitor)

  class FieldName(Expression):
    Decorators: dataclass
    Doc: Field name for struct and JSON objects....
    Class Variables: name
    Methods (2):
      Dunder methods: __str__
      - accept(visitor)

  class Literal(Expression):
    Decorators: dataclass
    Doc: Base class for literal values....
    Class Variables: value, type
    Methods (1):
      - accept(visitor)

  class StringLiteral(Literal):
    Decorators: dataclass
    Doc: String literal with BigQuery formatting options....
    Class Variables: quote_style, is_raw, is_bytes
    Methods (3):
      Dunder methods: __post_init__, __str__
      - accept(visitor)

  class BytesLiteral(Literal):
    Decorators: dataclass
    Doc: Bytes literal with formatting options....
    Class Variables: quote_style, is_raw
    Methods (1):
      - accept(visitor)

  class IntegerLiteral(Literal):
    Decorators: dataclass
    Doc: Integer literal....
    Class Variables: is_hexadecimal
    Methods (3):
      Dunder methods: __post_init__, __str__
      - accept(visitor)

  class NumericLiteral(Literal):
    Decorators: dataclass
    Doc: NUMERIC literal - exact decimal....
    Methods (1):
      - accept(visitor)

  class BigNumericLiteral(Literal):
    Decorators: dataclass
    Doc: BIGNUMERIC literal - high precision decimal....
    Methods (1):
      - accept(visitor)

  class BooleanLiteral(Literal):
    Decorators: dataclass
    Doc: Boolean literal....
    Methods (3):
      Dunder methods: __post_init__, __str__
      - accept(visitor)

  class FloatLiteral(Literal):
    Decorators: dataclass
    Doc: Float literal....
    Methods (3):
      Dunder methods: __post_init__, __str__
      - accept(visitor)

  class NullLiteral(Literal):
    Decorators: dataclass
    Doc: NULL literal....
    Class Variables: value
    Methods (3):
      Dunder methods: __post_init__, __str__
      - accept(visitor)

  class DateLiteral(Literal):
    Decorators: dataclass
    Doc: DATE literal....
    Methods (3):
      Dunder methods: __post_init__, __str__
      - accept(visitor)

  class TimeLiteral(Literal):
    Decorators: dataclass
    Doc: TIME literal....
    Methods (1):
      - accept(visitor)

  class DatetimeLiteral(Literal):
    Decorators: dataclass
    Doc: DATETIME literal....
    Methods (1):
      - accept(visitor)

  class TimestampLiteral(Literal):
    Decorators: dataclass
    Doc: TIMESTAMP literal....
    Class Variables: timezone
    Methods (3):
      Dunder methods: __post_init__, __str__
      - accept(visitor)

  class IntervalLiteral(Literal):
    Decorators: dataclass
    Doc: INTERVAL literal....
    Class Variables: from_part, to_part
    Methods (1):
      - accept(visitor)

  class ArrayLiteral(Literal):
    Decorators: dataclass
    Doc: Array literal....
    Class Variables: elements, element_type
    Methods (3):
      Dunder methods: __post_init__, __str__
      - accept(visitor)

  class StructLiteral(Literal):
    Decorators: dataclass
    Doc: Struct literal....
    Class Variables: fields, struct_type
    Methods (3):
      Dunder methods: __post_init__, __str__
      - accept(visitor)

  class RangeLiteral(Literal):
    Decorators: dataclass
    Doc: RANGE literal....
    Class Variables: range_type, lower_bound, upper_bound, lower_unbounded, upper_unbounded
    Methods (2):
      Dunder methods: __post_init__
      - accept(visitor)

  class JSONLiteral(Literal):
    Decorators: dataclass
    Doc: JSON literal....
    Methods (1):
      - accept(visitor)

  class NamedParameter(Expression):
    Decorators: dataclass
    Doc: Named query parameter (@param)....
    Class Variables: name
    Methods (1):
      - accept(visitor)

  class PositionalParameter(Expression):
    Decorators: dataclass
    Doc: Positional query parameter (?)....
    Class Variables: position
    Methods (1):
      - accept(visitor)

  class Comment(ASTNode):
    Decorators: dataclass
    Doc: Comment node to preserve comments in AST....
    Class Variables: text, style, is_multiline
    Methods (1):
      - accept(visitor)

  class HashComment(Comment):
    Decorators: dataclass
    Doc: Single-line comment using #....
    Methods (1):
      - __init__(text)

  class DashComment(Comment):
    Decorators: dataclass
    Doc: Single-line comment using --....
    Methods (1):
      - __init__(text)

  class BlockComment(Comment):
    Decorators: dataclass
    Doc: Block comment enclosed in /* */....
    Methods (1):
      - __init__(text, is_multiline)

  class BinaryOp(Expression):
    Decorators: dataclass
    Doc: Binary operation....
    Class Variables: left, operator, right
    Methods (2):
      Dunder methods: __str__
      - accept(visitor)

  class UnaryOp(Expression):
    Decorators: dataclass
    Doc: Unary operation....
    Class Variables: operator, operand
    Methods (2):
      Dunder methods: __str__
      - accept(visitor)

  class FunctionCall(Expression):
    Decorators: dataclass
    Doc: Function call expression....
    Class Variables: function_name, arguments
    Methods (2):
      Dunder methods: __str__
      - accept(visitor)
    Properties (2):
      - name
      - args

  class Cast(Expression):
    Decorators: dataclass
    Doc: CAST expression....
    Class Variables: expr, target_type, safe
    Methods (2):
      Dunder methods: __str__
      - accept(visitor)

  class TableRef(ASTNode):
    Decorators: dataclass
    Doc: Table reference in FROM clause....
    Class Variables: table, alias
    Methods (1):
      - accept(visitor)

  class SelectColumn(ASTNode):
    Decorators: dataclass
    Doc: Column selected in a SELECT list....
    Class Variables: expression, alias
    Methods (1):
      - accept(visitor)

  class WhereClause(ASTNode):
    Decorators: dataclass
    Doc: WHERE clause....
    Class Variables: condition
    Methods (1):
      - accept(visitor)

  class GroupByClause(ASTNode):
    Decorators: dataclass
    Doc: GROUP BY clause....
    Class Variables: expressions
    Methods (1):
      - accept(visitor)

  class HavingClause(ASTNode):
    Decorators: dataclass
    Doc: HAVING clause....
    Class Variables: condition
    Methods (1):
      - accept(visitor)

  class OrderByItem(ASTNode):
    Decorators: dataclass
    Doc: Single ORDER BY item....
    Class Variables: expression, direction
    Methods (2):
      Dunder methods: __str__
      - accept(visitor)

  class OrderByClause(ASTNode):
    Decorators: dataclass
    Doc: ORDER BY clause....
    Class Variables: items
    Methods (2):
      - __init__(items, expr, direction)
      - accept(visitor)

  class LimitClause(ASTNode):
    Decorators: dataclass
    Doc: LIMIT clause....
    Class Variables: limit, offset
    Methods (1):
      - accept(visitor)

  class Join(ASTNode):
    Decorators: dataclass
    Doc: JOIN clause....
    Class Variables: join_type, table, condition
    Methods (1):
      - accept(visitor)

  class Select(Statement):
    Decorators: dataclass
    Doc: SELECT statement....
    Class Variables: select_list, from_clause, distinct, joins, where_clause
    Methods (1):
      - accept(visitor)

  class Subquery(Expression):
    Decorators: dataclass
    Doc: Subquery expression....
    Class Variables: query, alias
    Methods (1):
      - accept(visitor)

  class CTE(ASTNode):
    Decorators: dataclass
    Doc: Common table expression....
    Class Variables: name, query, columns
    Methods (1):
      - accept(visitor)

  class WithClause(ASTNode):
    Decorators: dataclass
    Doc: WITH clause containing CTEs....
    Class Variables: ctes
    Methods (1):
      - accept(visitor)

  class SetOperator(Enum):
    Doc: Set operation types for combining SELECT statements....
    Class Variables: UNION, INTERSECT, EXCEPT

  class SetOperation(Statement):
    Decorators: dataclass
    Doc: Set operation combining two statements....
    Class Variables: left, right, operator, all
    Methods (1):
      - accept(visitor)

  class MergeInsert(ASTNode):
    Decorators: dataclass
    Doc: INSERT action in MERGE statement....
    Class Variables: columns, values
    Methods (1):
      - accept(visitor)

  class MergeUpdate(ASTNode):
    Decorators: dataclass
    Doc: UPDATE action in MERGE statement....
    Class Variables: assignments
    Methods (1):
      - accept(visitor)

  class MergeDelete(ASTNode):
    Decorators: dataclass
    Doc: DELETE action in MERGE statement....
    Methods (1):
      - accept(visitor)

  class MergeAction(ASTNode):
    Decorators: dataclass
    Doc: WHEN ... THEN action in MERGE....
    Class Variables: action, condition
    Methods (1):
      - accept(visitor)

  class Merge(Statement):
    Decorators: dataclass
    Doc: MERGE statement....
    Class Variables: target_table, source_table, merge_condition, actions
    Methods (1):
      - accept(visitor)

  class WindowSpecification(ASTNode):
    Decorators: dataclass
    Doc: Window specification for window functions....
    Class Variables: partition_by, order_by
    Methods (1):
      - accept(visitor)

  class WindowFunction(Expression):
    Decorators: dataclass
    Doc: Window function call....
    Class Variables: function_name, arguments, window_spec
    Methods (4):
      Dunder methods: __str__
      - partition_by(value)
      - order_by(value)
      - accept(visitor)
    Properties (4):
      - name
      - args
      - partition_by
      - order_by

  class WhenClause(ASTNode):
    Decorators: dataclass
    Doc: WHEN clause in CASE expression....
    Class Variables: condition, result
    Methods (2):
      Dunder methods: __str__
      - accept(visitor)

  class Case(Expression):
    Decorators: dataclass
    Doc: CASE expression....
    Class Variables: whens, else_result
    Methods (2):
      Dunder methods: __str__
      - accept(visitor)
    Properties (2):
      - when_clauses
      - else_clause

  class Insert(Statement):
    Decorators: dataclass
    Doc: INSERT statement supporting VALUES or SELECT....
    Class Variables: table, columns, values, query
    Methods (1):
      - accept(visitor)

  class Update(Statement):
    Decorators: dataclass
    Doc: UPDATE statement....
    Class Variables: table, assignments, where
    Methods (1):
      - accept(visitor)

  class CreateTable(Statement):
    Decorators: dataclass
    Doc: CREATE TABLE statement....
    Class Variables: table
    Methods (1):
      - accept(visitor)

  class Star(Expression):
    Decorators: dataclass
    Doc: SELECT * expression....
    Class Variables: except_columns
    Methods (2):
      Dunder methods: __str__
      - accept(visitor)

  class BQDataType(Enum):
    Doc: BigQuery base data types....
    Class Variables: INT64, FLOAT64, NUMERIC, BIGNUMERIC, BOOL

  class TypeParameter:
    Decorators: dataclass
    Doc: Parameter for parameterized types....
    Class Variables: name, value

  class BigQueryType:
    Decorators: dataclass
    Doc: Complete BigQuery type with parameters and nested types....
    Class Variables: base_type, parameters, element_type, fields, range_type
    Methods (1):
      Dunder methods: __str__

  class TypeParser:
    Doc: Parser for BigQuery type strings....
    Methods (7):
      - parse() [staticmethod]
      Private methods: _parse_array, _parse_struct, _parse_range
      ... and 3 more private methods

  class TypeValidator:
    Doc: Validator for BigQuery types and values....
    Methods (2):
      - validate_type() [staticmethod]
      - validate_value(type_) [staticmethod]

  class TypeCaster:
    Doc: Type casting utilities for BigQuery....
    Methods (3):
      - can_cast(to_type) [staticmethod]
      - find_common_supertype() [staticmethod]
      - requires_safe_cast(to_type) [staticmethod]

CONSTANTS (1):
----------------------------------------
  - TYPE_ALIASES

================================================================================
FILE: visitor.py
================================================================================
Lines of Code: 21
Imports: 1

CLASSES (1):
----------------------------------------

  class BaseVisitor:
    Methods (2):
      - visit(path)
      - generic_visit(path)

FUNCTIONS (1):
----------------------------------------
  - visit(ast_root, visitor) [documented]
